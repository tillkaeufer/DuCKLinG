# -----------------------------
# setting
# -----------------------------
bayesian_folder='./Example/' #folder in which the output of this program should be saved
dust_path='./Q-curves/fitting-Qcurves/Q_GRF/'    #path to the dust data

subfold='gas_only/' #subfolder where the retrieval run is saved


slab_folder='/data/tk502/LineData/' #'./LineData/' # folder where the slab grids are saved
slab_prefix='12_' #prefix of the slab grid that is used
run_number=3 #Giving your run a unique ID



fit_gas_only=True

# -----------------------------
# -----------------------------
# Parameters
# -----------------------------
# -----------------------------

#True does not work yet
sample_all=False #do you want to sample the dust scaling factors in a the bayesian way, otherwise the faster linear scaling is used

use_bb_star=True #Using a black body as the star? otherwise put the file path to your stellar spectrum in 'stellar_file'
stellar_file ='../DuCKLinG/Stellar_files/star_data.txt' # path to the stellar spectrum

rin_powerlaw=False #using a temperature power law as the inner rim? otherwise it's a black body

dust_species_list=[]


# -----------------------------
#fixed parameters
# -----------------------------


fixed_paras=True
fixed_dict={'distance':140,
            
            'sigma_obs_abs':0.01 # Jy you want to use at the uncertainty
            } 

# -----------------------------
# Priors
# -----------------------------


prior_dict={
            'q_emis':[-1,-0.1],
#            'log_sigma_obs_abs':[-5,-1] # only use if you want to fit for the uncertainty
            }


log_coldens=True
slab_prior_dict={       
           'H2O':{'ColDens_tmax':[14.00,24], 
                'ColDens_tmin':[14.00,24], 
                    'tmax':[25,1500], # and a temperature power law
                    'tmin':[25,1500]
                    }

}

# These priors are only relevant if sample_all=True            
prior_on_log=True #deciding if the prior should be on log or linear scale
                  # if on log scale the numbers should be between -inf and 0
                  # if on linear scale the numbers should be between 0 and 1
prior_scaling_dust=[-5,0]
scale_prior={'sc_ir':[-5,0],
             'sc_mid':[-5,0]}
             
             
             
# -----------------------------
#code to load observations
# -----------------------------

import numpy as np
from utils import calc_weights

lam_obs=np.load('./Observations/mock_observation_water_only_wave.npy')
flux_obs=np.load('./Observations/mock_observation_water_only_flux.npy')


min_wave=11.7
max_wave=25

idx=np.where(lam_obs<=max_wave)[0]
lam_obs=lam_obs[idx]
flux_obs=flux_obs[idx]
#sigma_obs=sigma_obs[idx]
idx=np.where(lam_obs>=min_wave)[0]
lam_obs_full=lam_obs[idx].copy()
flux_obs_full=flux_obs[idx].copy()

weights_obs_full=calc_weights(lam_obs_full)




lam_obs=[]
flux_obs=[]
weights_obs=[]

masking_ar=np.load('water_mask.npy')


for i in range(len(lam_obs_full)):
    exist=False
    for idx_mask in range(len(masking_ar)):
        if lam_obs_full[i]>masking_ar[idx_mask][0] and  lam_obs_full[i]<masking_ar[idx_mask][1]:
            exist=True
            break
    if not exist:
        lam_obs.append(lam_obs_full[i])
        flux_obs.append(flux_obs_full[i])
        weights_obs.append(weights_obs_full[i])

lam_obs=np.array(lam_obs)
flux_obs=np.array(flux_obs)
weights_obs=np.array(weights_obs)
print('len obs')
print(len(lam_obs))
print(len(flux_obs))

# -----------------------------
# Retrieval settings
# -----------------------------

use_ultranest=False

#for ultranest
slice_sampler=False
length_ultra=2 #only relevant if slice_sampler=True
adaptive_nsteps=False #only relevant if slice_sampler=True e.g. 'move-distance'


#for multinest
fast_retrival=True #accuracy setting of multinest 

#alternatively you get set the specific settings
#n_live_points = 400 # for multinest and ultranest
#evidence_tolerance = 5 # for multinest and ultranest
#sampling_efficiency = 0.3 # for multinest
#frac_remain= 0.01 # for ultranest
#dlogz=2.0 # for ultranest
#dKL=2.0 # for ultranest

